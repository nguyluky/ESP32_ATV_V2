/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: pairingmessage.proto */

#ifndef PROTOBUF_C_pairingmessage_2eproto__INCLUDED
#define PROTOBUF_C_pairingmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Pairing__PairingRequest Pairing__PairingRequest;
typedef struct Pairing__PairingRequestAck Pairing__PairingRequestAck;
typedef struct Pairing__PairingEncoding Pairing__PairingEncoding;
typedef struct Pairing__PairingOption Pairing__PairingOption;
typedef struct Pairing__PairingConfiguration Pairing__PairingConfiguration;
typedef struct Pairing__PairingConfigurationAck Pairing__PairingConfigurationAck;
typedef struct Pairing__PairingSecret Pairing__PairingSecret;
typedef struct Pairing__PairingSecretAck Pairing__PairingSecretAck;
typedef struct Pairing__PairingMessage Pairing__PairingMessage;


/* --- enums --- */

typedef enum _Pairing__PairingEncoding__EncodingType {
  PAIRING__PAIRING_ENCODING__ENCODING_TYPE__ENCODING_TYPE_UNKNOWN = 0,
  PAIRING__PAIRING_ENCODING__ENCODING_TYPE__ENCODING_TYPE_ALPHANUMERIC = 1,
  PAIRING__PAIRING_ENCODING__ENCODING_TYPE__ENCODING_TYPE_NUMERIC = 2,
  PAIRING__PAIRING_ENCODING__ENCODING_TYPE__ENCODING_TYPE_HEXADECIMAL = 3,
  PAIRING__PAIRING_ENCODING__ENCODING_TYPE__ENCODING_TYPE_QRCODE = 4,
  PAIRING__PAIRING_ENCODING__ENCODING_TYPE__UNRECOGNIZED = -1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PAIRING__PAIRING_ENCODING__ENCODING_TYPE)
} Pairing__PairingEncoding__EncodingType;
typedef enum _Pairing__PairingMessage__Status {
  PAIRING__PAIRING_MESSAGE__STATUS__UNKNOWN = 0,
  PAIRING__PAIRING_MESSAGE__STATUS__STATUS_OK = 200,
  PAIRING__PAIRING_MESSAGE__STATUS__STATUS_ERROR = 400,
  PAIRING__PAIRING_MESSAGE__STATUS__STATUS_BAD_CONFIGURATION = 401,
  PAIRING__PAIRING_MESSAGE__STATUS__STATUS_BAD_SECRET = 402,
  PAIRING__PAIRING_MESSAGE__STATUS__UNRECOGNIZED = -1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PAIRING__PAIRING_MESSAGE__STATUS)
} Pairing__PairingMessage__Status;
typedef enum _Pairing__RoleType {
  PAIRING__ROLE_TYPE__ROLE_TYPE_UNKNOWN = 0,
  PAIRING__ROLE_TYPE__ROLE_TYPE_INPUT = 1,
  PAIRING__ROLE_TYPE__ROLE_TYPE_OUTPUT = 2,
  PAIRING__ROLE_TYPE__UNRECOGNIZED = -1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PAIRING__ROLE_TYPE)
} Pairing__RoleType;

/* --- messages --- */

struct  Pairing__PairingRequest
{
  ProtobufCMessage base;
  char *client_name;
  char *service_name;
};
#define PAIRING__PAIRING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_request__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Pairing__PairingRequestAck
{
  ProtobufCMessage base;
  char *server_name;
};
#define PAIRING__PAIRING_REQUEST_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_request_ack__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Pairing__PairingEncoding
{
  ProtobufCMessage base;
  Pairing__PairingEncoding__EncodingType type;
  uint32_t symbol_length;
};
#define PAIRING__PAIRING_ENCODING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_encoding__descriptor) \
    , PAIRING__PAIRING_ENCODING__ENCODING_TYPE__ENCODING_TYPE_UNKNOWN, 0 }


struct  Pairing__PairingOption
{
  ProtobufCMessage base;
  size_t n_input_encodings;
  Pairing__PairingEncoding **input_encodings;
  size_t n_output_encodings;
  Pairing__PairingEncoding **output_encodings;
  Pairing__RoleType preferred_role;
};
#define PAIRING__PAIRING_OPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_option__descriptor) \
    , 0,NULL, 0,NULL, PAIRING__ROLE_TYPE__ROLE_TYPE_UNKNOWN }


struct  Pairing__PairingConfiguration
{
  ProtobufCMessage base;
  Pairing__PairingEncoding *encoding;
  Pairing__RoleType client_role;
};
#define PAIRING__PAIRING_CONFIGURATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_configuration__descriptor) \
    , NULL, PAIRING__ROLE_TYPE__ROLE_TYPE_UNKNOWN }


struct  Pairing__PairingConfigurationAck
{
  ProtobufCMessage base;
};
#define PAIRING__PAIRING_CONFIGURATION_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_configuration_ack__descriptor) \
     }


struct  Pairing__PairingSecret
{
  ProtobufCMessage base;
  ProtobufCBinaryData secret;
};
#define PAIRING__PAIRING_SECRET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_secret__descriptor) \
    , {0,NULL} }


struct  Pairing__PairingSecretAck
{
  ProtobufCMessage base;
  ProtobufCBinaryData secret;
};
#define PAIRING__PAIRING_SECRET_ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_secret_ack__descriptor) \
    , {0,NULL} }


struct  Pairing__PairingMessage
{
  ProtobufCMessage base;
  int32_t protocol_version;
  Pairing__PairingMessage__Status status;
  int32_t request_case;
  Pairing__PairingRequest *pairing_request;
  Pairing__PairingRequestAck *pairing_request_ack;
  Pairing__PairingOption *pairing_option;
  Pairing__PairingConfiguration *pairing_configuration;
  Pairing__PairingConfigurationAck *pairing_configuration_ack;
  Pairing__PairingSecret *pairing_secret;
  Pairing__PairingSecretAck *pairing_secret_ack;
};
#define PAIRING__PAIRING_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pairing__pairing_message__descriptor) \
    , 0, PAIRING__PAIRING_MESSAGE__STATUS__UNKNOWN, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Pairing__PairingRequest methods */
void   pairing__pairing_request__init
                     (Pairing__PairingRequest         *message);
size_t pairing__pairing_request__get_packed_size
                     (const Pairing__PairingRequest   *message);
size_t pairing__pairing_request__pack
                     (const Pairing__PairingRequest   *message,
                      uint8_t             *out);
size_t pairing__pairing_request__pack_to_buffer
                     (const Pairing__PairingRequest   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingRequest *
       pairing__pairing_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_request__free_unpacked
                     (Pairing__PairingRequest *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingRequestAck methods */
void   pairing__pairing_request_ack__init
                     (Pairing__PairingRequestAck         *message);
size_t pairing__pairing_request_ack__get_packed_size
                     (const Pairing__PairingRequestAck   *message);
size_t pairing__pairing_request_ack__pack
                     (const Pairing__PairingRequestAck   *message,
                      uint8_t             *out);
size_t pairing__pairing_request_ack__pack_to_buffer
                     (const Pairing__PairingRequestAck   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingRequestAck *
       pairing__pairing_request_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_request_ack__free_unpacked
                     (Pairing__PairingRequestAck *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingEncoding methods */
void   pairing__pairing_encoding__init
                     (Pairing__PairingEncoding         *message);
size_t pairing__pairing_encoding__get_packed_size
                     (const Pairing__PairingEncoding   *message);
size_t pairing__pairing_encoding__pack
                     (const Pairing__PairingEncoding   *message,
                      uint8_t             *out);
size_t pairing__pairing_encoding__pack_to_buffer
                     (const Pairing__PairingEncoding   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingEncoding *
       pairing__pairing_encoding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_encoding__free_unpacked
                     (Pairing__PairingEncoding *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingOption methods */
void   pairing__pairing_option__init
                     (Pairing__PairingOption         *message);
size_t pairing__pairing_option__get_packed_size
                     (const Pairing__PairingOption   *message);
size_t pairing__pairing_option__pack
                     (const Pairing__PairingOption   *message,
                      uint8_t             *out);
size_t pairing__pairing_option__pack_to_buffer
                     (const Pairing__PairingOption   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingOption *
       pairing__pairing_option__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_option__free_unpacked
                     (Pairing__PairingOption *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingConfiguration methods */
void   pairing__pairing_configuration__init
                     (Pairing__PairingConfiguration         *message);
size_t pairing__pairing_configuration__get_packed_size
                     (const Pairing__PairingConfiguration   *message);
size_t pairing__pairing_configuration__pack
                     (const Pairing__PairingConfiguration   *message,
                      uint8_t             *out);
size_t pairing__pairing_configuration__pack_to_buffer
                     (const Pairing__PairingConfiguration   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingConfiguration *
       pairing__pairing_configuration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_configuration__free_unpacked
                     (Pairing__PairingConfiguration *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingConfigurationAck methods */
void   pairing__pairing_configuration_ack__init
                     (Pairing__PairingConfigurationAck         *message);
size_t pairing__pairing_configuration_ack__get_packed_size
                     (const Pairing__PairingConfigurationAck   *message);
size_t pairing__pairing_configuration_ack__pack
                     (const Pairing__PairingConfigurationAck   *message,
                      uint8_t             *out);
size_t pairing__pairing_configuration_ack__pack_to_buffer
                     (const Pairing__PairingConfigurationAck   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingConfigurationAck *
       pairing__pairing_configuration_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_configuration_ack__free_unpacked
                     (Pairing__PairingConfigurationAck *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingSecret methods */
void   pairing__pairing_secret__init
                     (Pairing__PairingSecret         *message);
size_t pairing__pairing_secret__get_packed_size
                     (const Pairing__PairingSecret   *message);
size_t pairing__pairing_secret__pack
                     (const Pairing__PairingSecret   *message,
                      uint8_t             *out);
size_t pairing__pairing_secret__pack_to_buffer
                     (const Pairing__PairingSecret   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingSecret *
       pairing__pairing_secret__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_secret__free_unpacked
                     (Pairing__PairingSecret *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingSecretAck methods */
void   pairing__pairing_secret_ack__init
                     (Pairing__PairingSecretAck         *message);
size_t pairing__pairing_secret_ack__get_packed_size
                     (const Pairing__PairingSecretAck   *message);
size_t pairing__pairing_secret_ack__pack
                     (const Pairing__PairingSecretAck   *message,
                      uint8_t             *out);
size_t pairing__pairing_secret_ack__pack_to_buffer
                     (const Pairing__PairingSecretAck   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingSecretAck *
       pairing__pairing_secret_ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_secret_ack__free_unpacked
                     (Pairing__PairingSecretAck *message,
                      ProtobufCAllocator *allocator);
/* Pairing__PairingMessage methods */
void   pairing__pairing_message__init
                     (Pairing__PairingMessage         *message);
size_t pairing__pairing_message__get_packed_size
                     (const Pairing__PairingMessage   *message);
size_t pairing__pairing_message__pack
                     (const Pairing__PairingMessage   *message,
                      uint8_t             *out);
size_t pairing__pairing_message__pack_to_buffer
                     (const Pairing__PairingMessage   *message,
                      ProtobufCBuffer     *buffer);
Pairing__PairingMessage *
       pairing__pairing_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pairing__pairing_message__free_unpacked
                     (Pairing__PairingMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Pairing__PairingRequest_Closure)
                 (const Pairing__PairingRequest *message,
                  void *closure_data);
typedef void (*Pairing__PairingRequestAck_Closure)
                 (const Pairing__PairingRequestAck *message,
                  void *closure_data);
typedef void (*Pairing__PairingEncoding_Closure)
                 (const Pairing__PairingEncoding *message,
                  void *closure_data);
typedef void (*Pairing__PairingOption_Closure)
                 (const Pairing__PairingOption *message,
                  void *closure_data);
typedef void (*Pairing__PairingConfiguration_Closure)
                 (const Pairing__PairingConfiguration *message,
                  void *closure_data);
typedef void (*Pairing__PairingConfigurationAck_Closure)
                 (const Pairing__PairingConfigurationAck *message,
                  void *closure_data);
typedef void (*Pairing__PairingSecret_Closure)
                 (const Pairing__PairingSecret *message,
                  void *closure_data);
typedef void (*Pairing__PairingSecretAck_Closure)
                 (const Pairing__PairingSecretAck *message,
                  void *closure_data);
typedef void (*Pairing__PairingMessage_Closure)
                 (const Pairing__PairingMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    pairing__role_type__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_request__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_request_ack__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_encoding__descriptor;
extern const ProtobufCEnumDescriptor    pairing__pairing_encoding__encoding_type__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_option__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_configuration__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_configuration_ack__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_secret__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_secret_ack__descriptor;
extern const ProtobufCMessageDescriptor pairing__pairing_message__descriptor;
extern const ProtobufCEnumDescriptor    pairing__pairing_message__status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_pairingmessage_2eproto__INCLUDED */
